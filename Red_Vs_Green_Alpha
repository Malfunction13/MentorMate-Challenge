import copy

"""Takes user input on board dimension, initializes the board and collects the target to track and number of turns"""

board_size = input("Please insert your board size as X, Y: ").split(", ")
columns, rows = int(board_size[0]), int(board_size[1])
board = []

for i in range(rows):  # takes input on initial state as string on each line
    gen_zero = input(f"Please insert Generation Zero for row {i + 1}: ")
    gen_zero = [j for j in gen_zero]  # turn each line of input into a list
    board.append(gen_zero)  # append to board to create 2D Matrix

target = input("Please insert target location and number of turns as X, Y, N: ").split(", ")
target_y, target_x, turns = int(target[1]), int(target[0]), int(target[2])

"""Check if there are elements in top-left, top-center and top-right and add 1 point for each existing green neighbour
to the counter. Return the number of green neighbours."""

print(board)

def check_top(matrix, y, x):
    top_neighbours = 0
    if x - 1 >= 0:
        if matrix[y - 1][x - 1] == "1":
            top_neighbours += 1
    if matrix[y - 1][x] == "1":
        top_neighbours += 1
    if x + 1 < len(board[y]):
        if matrix[y - 1][x + 1] == "1":
            top_neighbours += 1
    print(f"top neighbours count: {top_neighbours}")
    return top_neighbours


def check_sides(matrix, y, x):
    side_neighbours = 0
    if x - 1 >= 0:
        if matrix[y][x - 1] == "1":
            side_neighbours += 1
    if x + 1 < len(matrix[y]):
        if matrix[y][x + 1] == "1":
            side_neighbours += 1
    print(f"side neighbours count: {side_neighbours}")
    return side_neighbours


def check_bottom(matrix, y, x):
    bottom_neighbours = 0
    if x - 1 >= 0:
        if matrix[y + 1][x - 1] == "1":
            bottom_neighbours += 1
    if matrix[y + 1][x] == "1":
        bottom_neighbours += 1
    if x + 1 < len(matrix[y]):
        if matrix[y + 1][x + 1] == "1":
            bottom_neighbours += 1
    print(f"bottom neighbours count: {bottom_neighbours}")
    return bottom_neighbours


def switch(element, total_neighbours):
    if element == "0":
        if total_neighbours in [3, 6]:
            new_element = "1"
        else:
            new_element = element
    else:
        if total_neighbours in [0, 1, 4, 5, 7, 8]:
            new_element = "0"
        else:
            new_element = element
    print(f"new element is: {new_element}")
    return new_element
green_control = 0
for turn in range(turns):
    if board[target_y][target_x] == "1":
        green_control += 1
    temp_board = copy.deepcopy(board)
    for y in range(len(board)):
        for x in range(len(board[y])):
            if y - 1 >= 0:
                top_neighbours = check_top(board, y, x)
            else:
                top_neighbours = 0
            side_neighbours = check_sides(board, y, x)
            if y + 1 < len(board):
                bottom_neighbours = check_bottom(board, y, x)
            else:
                bottom_neighbours = 0
            total_neighbours = top_neighbours + side_neighbours + bottom_neighbours
            temp_board[y][x] = switch(board[y][x], total_neighbours)

    board = copy.deepcopy(temp_board)
if board[target_y][target_x] == "1":
    green_control += 1
print(green_control)
